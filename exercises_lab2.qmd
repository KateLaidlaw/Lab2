---
title: "Lab2Exercises"
format: html
editor: visual
---

```{r}
tree_dat <- read.csv("tree_dat.csv")
```

```{r}
library(tidyverse)
library(dplyr)
```

```{r}
#1
#Read in the Minnesota tree growth dataset. Use glimpse to understand the structure and names of the dataset. Decribe the structure and what you see in the dataset?
nrow(tree_dat)
```

```{r}
#2
#How many reocrds have been made in stand 1?
tree_dat %>%
  filter(standID == 1) %>%
  tally()
```

```{r}
#3
#How many records of the Abies balsamea and Pinus strobus species have been made?
tree_dat %>% 
  filter(species %in% c("ABBA", "PIST")) %>%
  count(species)

```

```{r}
#4
# How many trees are older then 200 years old in the last year of the dataset?
last_year <- max(tree_dat$year, na.rm = TRUE)

tree_dat %>% 
  filter(year == last_year, age > 200) %>%
  tally()
  
```

```{r}
#5
#What is the oldest tree in the dataset found using slice_max?
tree_dat %>%
  slice_max(order_by = age, n = 1)
```

```{r}
#6
#Find the oldest 5 trees recorded in 2001. Use the help docs to understand optional parameters
oldest_tree <-tree_dat %>%
  slice_max(order_by = age, n=5)

print(oldest_tree)
```

```{r}
#7
# Using slice_sample, how many trees are in a 30% sample of those recorded in 2002?
tree_dat %>%
  filter(year == 2002) %>%
  slice_sample(n = round(nrow(tree_dat)* .30,0)) %>% 
  glimpse()
```

```{r}
#8
#Filter all trees in stand 5 in 2007. Sort this subset by descending radius at breast height (rad_ib) and use slice_head() to get the top three trees. Report the tree IDs
tree_dat %>%
  filter(standID == 5, year == 2007) %>%
  arrange(desc(rad_ib)) %>%
  slice_head(n = 3) %>%
  pull(treeID)
```

```{r}
#9
#Reduce your full data.frame to [treeID, stand, year, and radius at breast height]. Filter to only those in stand 3 with records from 2007, and use slice_min to pull the smallest three trees meaured that year.
tree_dat %>%
  select(treeID, standID, year, rad_ib) %>%
  filter(standID == 3, year == 2007) %>%
  slice_min(rad_ib, n = 3) %>%
  pull(treeID)
```

```{r}
#10
#Use select to remove the stand column. Use glimspe to show the dataset.
tree_dat %>%
  select(-stand) %>%
  glimpse()
```

```{r}
#11
# Look at the help document for dplyr::select and examine the “Overview of selection features”. Identify an option (there are multiple) that would help select all columns with the string “ID” in the name. Using glimpse to view the remaining dataset
?dplyr::select:contains

tree_dat %>%
select(contains("ID")) %>%
  glimpse()
```

```{r}
#12
#Find a selection pattern that captures all columns with either ‘ID’ or ‘stand’ in the name. Use glimpse to verify the selection.
selected_data <- tree_dat |>
  select(contains("ID"), contains("stand"))|>
  glimpse()
```

```{r}
#13
#Looking back at the data dictionary, rename rad_inc and inc to include _[unit] in the name. Unlike earlier options, be sure that this renaming is permanent, and stays with your data.frame (e.g. <-). Use glimpse to view your new data.frame.


library(dplyr)
tree_dat <- tree_dat |>
  rename(rad_ib_cm = rad_ib) |>
  rename(inc_cm = inc)

ls(tree_dat)

```

```{r}
#14
#A key measurement in forestry is “basal area column”. The metric is computed with the formula:
#BA(m2) = 0.00007854⋅DBH^2
#Where DBH is the diameter at breast height (cm). Use mutate to compute DBH in centimeters, and BA in m2 (HINT: Make sure rad_ib is in cm prior to computing the diameter!). What is the mean BA_m2 of the the species POTR in 2007?

library(dplyr)

tree_dat <- tree_dat |>
  mutate(
    DBH = ((rad_ib_cm)/10)*2,
    BA_m2 = 0.00007854*DBH^2
  ) |>
  glimpse()

tree_dat |>
  filter(species == "POTR") |>
  filter(year == 2007) |>
  summarise(mean_BAm2 = mean(BA_m2, na.rm = TRUE))

```

```{r}
#15
#Lets say for the sake of our study, trees are not established until they are 5 years of age. Use if_else to add a boolean column to our dataset called established that is TRUE if the age is greater then 5 and FALSE if less then or equal to five. Once added, use count (see ?count) to determine how many records are from estabilshed trees?

tree_dat <- tree_dat|>
  mutate(
    established = if_else(age >5, TRUE, FALSE)
  )
tree_dat |>
count(established)
```

```{r}
#16
#Use mutate and case_when to add a new column to you data.frame that classifies each tree into the proper DBH_class. Once done, limit your dataset to the year 2007 and report the number of each class with count.

tree_dat |> 
  mutate(
    DBH_class = case_when(
      DBH <= 10 ~ "small",
      DBH > 10 & DBH <= 20 ~ "medium",
      DBH > 20 ~ "big",
      TRUE ~ NA_character_)) |>
  filter(year == 2007) |>
  count(DBH_class) 

colnames(tree_dat)

```

```{r}
#17
#Compute the mean DBH (in cm) and standard deviation of DBH (in cm) for all trees in 2007. Explain the values you found and their statistical meaning.

t2007 = tree_dat |>
  filter(year == 2007) 
(mean_DBH <- mean(t2007$DBH, na.rm = TRUE))
sd_DBH <- sd(t2007$DBH) 

  
#The mean DBH is ~11.532cm, and the standard deviation of DBH is ~6.468. This means that the mean diameter breast height of all trees in 2007 is roughly 11.532cm, and the standard deviation of this statistic is roughly 6.468. This means that there the actual mean could fall anywhere 6.468 below or above the calculated mean.
```

The mean is `r mean_DBH`.

```{r}
#18
#Compute the per species mean tree age using only those ages recorded in 2003. Identify the three species with the oldest mean age.

tree_dat |>
  filter(year == 2003) |>
  group_by(species) |>
  summarise(mean_age = mean(age)) |>
  arrange(desc(mean_age)) |>
  top_n(3, mean_age)
```

```{r}
#19
#In a single summarize call, find the number of unique years with records in the data set along with the first and last year recorded?

tree_dat |>
  summarise(
    unique_years = n_distinct(year),
    first_year = min(year),
    second_year = max(year)
  )


```

```{r}
#20
#Determine the stands with the largest number of unique years recorded. Report all stands with largest (or tied with the largest) temporal record.

tree_dat |>
  group_by(stand) |>
  summarise(unique_years = n_distinct(year),
            .groups = "drop") |>
  filter(unique_years == max(unique_years))


```

```{r}
#Final Question:
#part one
#We are interested in the annual DBH growth rate of each species through time, but we only want to include trees with at least a 10 year growth record. To identify this, we need to idnetify the per year growth made by each tree, there total growth record, and then average that, and compute the standard deviation, across the species.

#Use a combination of dplyr verbs to compute these values and report the 3 species with the fastest growth, and the 3 species with the slowest growth. (** You will need to use either lag() or diff() in your compuation. You can learn more about each in the Help pages)

avg_growth <- tree_dat |>
  arrange(treeID, year) |> 
  group_by(treeID, species) |>
  mutate(annual_growth = DBH - lag(DBH)) |>
  filter(!is.na(annual_growth)) |>
  filter(age >= 10) %>%
  group_by(species) |>
  summarise(
    avg_growth = mean(annual_growth),
    sd_growth = sd(annual_growth),
    number_years = n_distinct(year),
    .groups = "drop"
  ) 
print(avg_growth)

fastest_growth <- avg_growth %>%
  arrange(desc(avg_growth)) %>%
  head(3)

slowest_growth <- avg_growth %>%
  arrange(avg_growth) %>%
  head(3)

print("Top 3 fastest growing species:")
print(fastest_growth)

print("Top 3 slowest growing species:")
print(slowest_growth)

```

```{r}
#Lastly, find and include an image of the fastest growing species. Add the image to your images directory.


```

![Quaking Aspen: the fastest growing tree.](images/blog-aspen.png)
